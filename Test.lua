---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by steven.
--- DateTime: 2021/6/24 10:27
---
local a, b = 1, 2 -- a 的 值 是 1， b 的 值 是 2
local c, d = 1, 2, 3 -- c 的 值 是 1， d 的 值 是 2， 3 被 舍弃 了
local e, f = 1 -- e 的 值 是 1， f 的 值 是 nil
print(a,b,c,d,e,f)
print(' 1' + 1) -- 2
print(' 10' * 2) -- 20
print( 1 == '1') -- false, 二者 类型 不同， 不会 进行 自动 类型 转换
print({' a'} == {'a'}) -- false, 对于 表 类型 值 比较 的 是 二者 的 引用
print( 1 == tonumber(' 1'))
print(' 1' == tostring( 1))
print( 1 and 5) -- 5
print( 1 or 5) -- 1
print( not 0) -- false
print('' or 1) -- '' Lua 的 逻辑 操作 符 支持 短路， 也就是说
print(' hello' .. ' ' .. 'world!') -- 'hello world!'
print(#' hello') -- 5 获取字符串或者表的长度

if 1==1 then
    exists = true
    print(exists)
else
    exists = false
end
-- for example
local sum = 0
for i = 1, 100 do
    sum = sum + i
end

-- 表 (键值对) lua的唯一数据结构
a = {} -- 将 变量 a 赋值 为 一个 空 表
a['field'] = 'value'  -- 将 field 字段 赋值 value
print( a. field)  -- 打印 内容 为' value'， a. field 是 a[' field'] 的 语法 糖。
people = {
-- 也可以 这样 定义
    name = 'Bob',
    age = 29
}
print( people. name) -- 打印 的 内容 为' Bob'

a = {}
a[ 1] = 'Bob'
a[ 2] = 'Jeff'

a = {'Bob', 'Jeff'}
print( a[ 1])

for index, value in ipairs( a) do     -- ipairs 是 Lua 内置 的 函数， 实现 类似 迭代 器 的 功能。
print( index)  -- index 迭代 数组 a 的 索引
    print( value)  -- value 迭代 数组 a 的 值
end
-- 等效写法
for i = 1, #a do
    print( i)
    print( a[ i])
end

-- pair 迭代器
people = { name = 'Bob', age = 29 }
for index, value in pairs( people) do
    print( index)
    print( value)
end

--[[
pairs 与 ipairs 的 区别 在于 前者 会 遍历 所有 值 不为 nil 的 索引， 而后 者 只会 从 索引 1 开始 递增 遍历 到 最后 一个 值 不为 nil 的 整数 索引。
]]













